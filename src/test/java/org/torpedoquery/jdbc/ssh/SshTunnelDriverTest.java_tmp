package org.torpedoquery.jdbc.ssh;

import com.jcraft.jsch.JSchException;
import org.h2.tools.Server;
import org.junit.*;

import java.sql.*;
import java.util.Properties;

import static org.junit.Assert.*;

public class SshTunnelDriverTest {

    private static final String SSH_USER = "testuser";
    private static final String SSH_PASSWORD = "testpass";
    private static final String SSH_HOST = "localhost";
    private static final int SSH_PORT = 2222;
    private static final String REMOTE_DB_HOST = "localhost";
    private static final int REMOTE_DB_PORT = 9092;
    private static final String DB_URL = "jdbc:ssh:h2:tcp://" + REMOTE_DB_HOST + "/mem:testdb";

    private static Server h2Server;
    private static MockSSHServer mockSSHServer;

    @BeforeClass
    public static void setUpClass() throws Exception {
        // Start H2 Database Server
        h2Server = Server.createTcpServer("-tcpPort", String.valueOf(REMOTE_DB_PORT), "-tcpAllowOthers").start();

        // Start Mock SSH Server
        mockSSHServer = new MockSSHServer(SSH_PORT, SSH_USER, SSH_PASSWORD);
        mockSSHServer.start();
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
        // Stop H2 Database Server
        if (h2Server != null) {
            h2Server.stop();
        }

        // Stop Mock SSH Server
        if (mockSSHServer != null) {
            mockSSHServer.stop();
        }
    }

    @Test
    public void testSuccessfulConnection() throws SQLException {
        Properties properties = new Properties();
        properties.setProperty("sshUser", SSH_USER);
        properties.setProperty("sshPassword", SSH_PASSWORD);
        properties.setProperty("sshHost", SSH_HOST);
        properties.setProperty("sshPort", String.valueOf(SSH_PORT));

        // Ensure the SshTunnelDriver is registered
        DriverManager.registerDriver(new SshTunnelDriver());

        Connection connection = DriverManager.getConnection(DB_URL, properties);
        assertNotNull("Connection should not be null", connection);
        assertFalse("Connection should not be closed", connection.isClosed());

        // Perform a simple query
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT 1");

        assertTrue("ResultSet should have at least one row", resultSet.next());
        assertEquals("First column should be 1", 1, resultSet.getInt(1));

        resultSet.close();
        statement.close();
        connection.close();
    }

    @Test
    public void testInvalidSSHCredentials() {
        Properties properties = new Properties();
        properties.setProperty("sshUser", "invalidUser");
        properties.setProperty("sshPassword", "invalidPass");
        properties.setProperty("sshHost", SSH_HOST);
        properties.setProperty("sshPort", String.valueOf(SSH_PORT));

        SQLException exception = assertThrows(SQLException.class, () -> {
            DriverManager.getConnection(DB_URL, properties);
        });

        assertTrue("Exception should be caused by JSchException",
                exception.getCause() instanceof JSchException);
    }

    @Test
    public void testMissingSSHParameters() {
        Properties properties = new Properties();
        // Missing sshUser and sshPassword

        SQLException exception = assertThrows(SQLException.class, () -> {
            DriverManager.getConnection(DB_URL, properties);
        });

        assertTrue("Exception message should mention missing SSH parameters",
                exception.getMessage().contains("sshUser"));
    }

    @Test
    public void testInvalidDatabaseURL() {
        Properties properties = new Properties();
        properties.setProperty("sshUser", SSH_USER);
        properties.setProperty("sshPassword", SSH_PASSWORD);
        properties.setProperty("sshHost", SSH_HOST);
        properties.setProperty("sshPort", String.valueOf(SSH_PORT));

        String invalidDbUrl = "jdbc:ssh:h2:tcp://" + REMOTE_DB_HOST + "/invalidDb";

        SQLException exception = assertThrows(SQLException.class, () -> {
            DriverManager.getConnection(invalidDbUrl, properties);
        });

        assertEquals("08001", exception.getSQLState()); // SQLState for connection failure
    }

    @Test
    public void testPortForwarding() throws SQLException {
        Properties properties = new Properties();
        properties.setProperty("sshUser", SSH_USER);
        properties.setProperty("sshPassword", SSH_PASSWORD);
        properties.setProperty("sshHost", SSH_HOST);
        properties.setProperty("sshPort", String.valueOf(SSH_PORT));

        // Ensure the SshTunnelDriver is registered
        DriverManager.registerDriver(new SshTunnelDriver());

        Connection connection = DriverManager.getConnection(DB_URL, properties);
        assertNotNull("Connection should not be null", connection);

        // Verify that the SSH tunnel is forwarding to the correct remote port
        SSHInfo sshInfo = JDBCUtil.getSSHinfo(DB_URL, properties);
        SSHSession sshSession = SshTunnelDriver.INSTANCE.getSSHSession(sshInfo);
        assertNotNull("SSHSession should not be null", sshSession);
        assertEquals("Remote port should match", REMOTE_DB_PORT, sshSession.getRemotePort());

        connection.close();
    }
}
